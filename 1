#include <iostream>
#include <string>
#include <tuple>
#include <vector>

using namespace std;

tuple<int, int, int> Find_max_cross(vector<int> A, int low, int mid, int high)
{
	int left_sum = -10000000, max_left;
	int suml = 0;

	for (int i = mid; i > low; i--)
	{
		suml = suml + A[i];
		if (suml > left_sum)
		{
			left_sum = suml;
			max_left = i;
		}
	}
	int right_sum = -10000000, max_right;
	int sumr = 0;

	for (int i = mid + 1; i < high; i++)
	{
		sumr = sumr + A[i];
		if (sumr > right_sum)
		{
			right_sum = sumr;
			max_right = i;
		}
	}
	return {max_left, max_right, left_sum + right_sum};
}

tuple<int, int, int> Find_max(vector<int> A, int low,int high)
{
	if (high == low)
	{
		return { low, high, A[low] };
	}
	else
	{
		int mid = (low + high) / 2;
		int right_low, right_hight, right_sum, left_low, left_high, left_sum, cross_low, cross_high, cross_sum;
		tuple<int, int, int> { left_low, left_high, left_sum } = Find_max(A, low, mid);
		tuple<int, int, int> { right_low, right_hight, right_sum } = Find_max(A, mid + 1, high);
		tuple<int, int, int> { cross_low, cross_high, cross_sum } = Find_max_cross(A, low, mid, high);

		if (left_sum >= right_sum && left_sum >= cross_sum)
		{
			return { left_low, left_high, left_sum };
		}
		else if (right_sum >= left_sum && right_sum >= cross_sum)
		{
			return { right_low, right_hight, right_sum };
		}
		else
		{
			return { cross_low, cross_high, cross_sum };
		}

	}
	

}

int main() {

	vector<int> A = {5, -1, 6, 2, -4, -2, 4};
	Find_max(A, 0, A.size() - 1);

}
